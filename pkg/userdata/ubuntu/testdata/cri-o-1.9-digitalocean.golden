#cloud-config
hostname: node1

package_update: true

ssh_pwauth: no

ssh_authorized_keys:
- "ssh-rsa AAABBB"
- "ssh-rsa CCCDDD"

write_files:
- path: "/etc/kubernetes/cloud-config"
  content: |



- path: "/usr/local/bin/download-kubelet"
  permissions: "0777"
  content: |
    #!/bin/bash
    set -xeuo pipefail
    mkdir -p /opt/bin
    if ! [[ -x /opt/bin/kubelet ]]; then
      for try in {1..3}; do
         if curl -L --fail -o /opt/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/v1.9.2/bin/linux/amd64/kubelet; then
          chmod +x /opt/bin/kubelet
          exit 0
         fi
      done
      exit 1
    fi

- path: "/usr/local/bin/download-kubeadm"
  permissions: "0777"
  content: |
    #!/bin/bash
    set -xeuo pipefail
    mkdir -p /opt/bin
    if ! [[ -x /opt/bin/kubeadm ]]; then
      for try in {1..3}; do
        if curl -L --fail -o /opt/bin/kubeadm https://storage.googleapis.com/kubernetes-release/release/v1.9.2/bin/linux/amd64/kubeadm; then
          chmod +x /opt/bin/kubeadm
          exit 0
        fi
      done
      exit 1
    fi

- path: "/usr/local/bin/download-cni"
  permissions: "0777"
  content: |
    #!/bin/bash
    set -xeuo pipefail
    mkdir -p /opt/cni/bin
    if ! [[ -x /opt/cni/bin/bridge ]]; then
      cd /opt/cni/bin/
      for try in {1..3}; do
        if curl -L --fail https://storage.googleapis.com/cni-plugins/cni-plugins-amd64-v0.6.0.tgz|tar -xvz; then
          exit 0
        fi
      done
      exit 1
    fi

- path: "/usr/local/bin/download-kubelet-kubeadm-unitfile"
  permissions: "0777"
  content: |
    #!/bin/bash
    set -xeuo pipefail
    if ! [[ -f /etc/systemd/system/kubelet.service.d/10-kubeadm.conf ]]; then
      for try in {1..3}; do
        if curl -L --fail https://raw.githubusercontent.com/kubernetes/kubernetes/v1.9.2/build/debs/10-kubeadm.conf \
          |sed "s:/usr/bin:/opt/bin:g" > /etc/systemd/system/kubelet.service.d/10-kubeadm.conf; then
         systemctl daemon-reload
        exit 0
       fi
      done
      exit 1
    fi
- path: "/usr/local/bin/download-crictl"
  permissions: '0777'
  content: |
    #!/bin/bash
    set -xeuo pipefail
    mkdir -p /opt/bin /opt/cni/bin /etc/cni/net.d /var/run/kubernetes /var/lib/kubelet /etc/kubernetes/manifests /var/log/containers
    if ! [[ -x /opt/bin/crictl ]]; then
      for try in {1..3}; do
        curl -L --fail https://github.com/kubernetes-incubator/cri-tools/releases/download/v0.2/crictl-v0.2-linux-amd64.tar.gz |tar -xzC /opt/bin
        break
      done
    fi

- path: "/etc/systemd/system/crictl-binary.service"
  content: |
    [Unit]
    Requires=network-online.target
    After=network-online.target

    [Service]
    Type=oneshot
    RemainAfterExit=true
    ExecStart=/usr/local/bin/download-crictl


- path: "/etc/systemd/system/kubelet-binary.service"
  content: |
    [Unit]
    Requires=network-online.target
    After=network-online.target

    [Service]
    Type=oneshot
    RemainAfterExit=true
    ExecStart=/usr/local/bin/download-kubelet

- path: "/etc/systemd/system/kubeadm-binary.service"
  content: |
    [Unit]
    Requires=network-online.target
    After=network-online.target

    [Service]
    Type=oneshot
    RemainAfterExit=true
    ExecStart=/usr/local/bin/download-kubeadm

- path: "/etc/systemd/system/cni-binary.service"
  content: |
    [Unit]
    Requires=network-online.target
    After=network-online.target

    [Service]
    Type=oneshot
    RemainAfterExit=true
    ExecStart=/usr/local/bin/download-cni

- path: "/etc/systemd/system/kubeadm-unitfile.service"
  content: |
    [Unit]
    Requires=network-online.target
    After=network-online.target

    [Service]
    Type=oneshot
    RemainAfterExit=true
    ExecStart=/usr/local/bin/download-kubelet-kubeadm-unitfile

- path: "/etc/systemd/system/kubeadm-join.service"
  content: |
    [Unit]
    Requires=network-online.target
    Requires=kubelet-binary.service kubeadm-binary.service cni-binary.service kubeadm-unitfile.service
    After=network-online.target
    After=kubelet-binary.service kubeadm-binary.service cni-binary.service kubeadm-unitfile.service
    Requires=crio.service
    After=crio.service


    [Service]
    Type=oneshot
    RemainAfterExit=true
    Environment="PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/bin"
    ExecStartPre=/sbin/modprobe br_netfilter
    ExecStart=/opt/bin/kubeadm join \
      --cri-socket /var/run/crio/crio.sock \
      --token my-token \
      --discovery-token-ca-cert-hash sha256:6caecce9fedcb55d4953d61a27dc6997361a2f226ad86d7e6004dde7526fc4b1 \
      server:443

- path: "/etc/systemd/system/kubelet.service.d/20-extra.conf"
  content: |
    [Service]
    Environment="KUBELET_EXTRA_ARGS= \
      --authentication-token-webhook=true --hostname-override=node1 \
       --container-runtime=remote --container-runtime-endpoint=unix:///var/run/crio/crio.sock --cgroup-driver=systemd"

- path: "/etc/systemd/system/kubelet.service.d/30-clusterdns.conf"
  content: |
    [Service]
    Environment="KUBELET_DNS_ARGS=--cluster-dns=10.10.10.10 --cluster-domain=cluster.local"

- path: "/etc/systemd/system/kubelet.service"
  content: |
    [Unit]
    Description=Kubelet
    Requires=network-online.target
    After=network-online.target
    Requires=kubelet-binary.service kubeadm-binary.service cni-binary.service kubeadm-unitfile.service
    After=kubelet-binary.service kubeadm-binary.service cni-binary.service kubeadm-unitfile.service
    Requires=crio.service
    After=crio.service

    [Service]
    Environment="PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/bin"
    ExecStart=/opt/bin/kubelet
    Restart=always
    StartLimitInterval=0
    RestartSec=10
    Restart=always

    [Install]
    WantedBy=multi-user.target
- path: "/etc/sysconfig/crio-network"
  content: |
    CRIO_NETWORK_OPTIONS="--registry=docker.io"

runcmd:
- systemctl enable kubelet
- systemctl start kubeadm-join

apt:
  sources:
    cri-o:
      source: "ppa:projectatomic/ppa"

# install dependencies for cloud-init via bootcmd...
bootcmd:
- "sudo apt-get update && sudo apt-get install -y software-properties-common gdisk eatmydata"

packages:
- "curl"
- "ca-certificates"
- "ceph-common"
- "cifs-utils"
- "conntrack"
- "e2fsprogs"
- "ebtables"
- "ethtool"
- "git"
- "glusterfs-client"
- "iptables"
- "jq"
- "kmod"
- "openssh-client"
- "nfs-common"
- "socat"
- "util-linux"
- "open-vm-tools"
- "cri-o-1.9"
