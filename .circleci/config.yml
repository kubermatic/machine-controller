defaults: &defaults
  docker:
    - image: golang:1.10.3
  working_directory: /go/src/github.com/kubermatic/machine-controller

version: 2
jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - save_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /go/src/github.com/kubermatic/machine-controller

  check-dependencies:
    <<: *defaults
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - run: export DEP_RELEASE_TAG=v0.5.0; curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      - run: dep status

  lint:
    <<: *defaults
    docker:
      - image: quay.io/kubermatic/gometalinter:latest
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - run: gometalinter --config gometalinter.json ./...

  test:
    <<: *defaults
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - run: go test -race ./...

  build:
    <<: *defaults
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - run: DEP_RELEASE_TAG=v0.4.1 curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      - run: make machine-controller
      - save_cache:
          key: machine-controller-{{ .Revision }}
          paths:
            - /go/src/github.com/kubermatic/machine-controller
  end-to-end:
    <<: *defaults
    steps:
      - restore_cache:
          key: machine-controller-{{ .Revision }}
      - run:
          name: Install dependencies
          command: >-
              apt update && apt install -y jq rsync unzip &&
              curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl &&
              chmod +x kubectl &&
              mv kubectl /usr/local/bin
      - run:
          name: Generate ssh keypair
          command: ssh-keygen -f $HOME/.ssh/id_rsa -P ''
      - run:
          name: Create environment at cloud provider
          command: make -C test/tools/integration apply
      - run:
          name: Create kubeadm cluster and install machine-controller onto it
          command: ./test/tools/integration/provision_master.sh
      - run:
          name:  Run E2E test
          command: >-
              export KUBECONFIG=$GOPATH/src/github.com/kubermatic/machine-controller/.kubeconfig &&
              go test -race -tags=e2e -parallel 240 -v -timeout 30m  ./test/e2e/... -identifier=$CIRCLE_BUILD_NUM ||
              (kubectl logs -n kube-system $(kubectl get pods -n kube-system|egrep '^machine-controller'|
              awk '{print $1}'); exit 1)
          no_output_timeout: 25m
      - run:
          name: Clean up machines
          command: ./test/tools/integration/cleanup_machines.sh
          when: always
          no_output_timeout: 25m
      - run:
          name: Clean up master
          command: make -C test/tools/integration destroy
          when: always

  publish:
    <<: *defaults
    docker:
      - image: docker:stable
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: machine-controller-{{ .Revision }}
      - setup_remote_docker
      - run: apk update && apk add make bash git
      - run: |
          set -e
          export GIT_TAG=$CIRCLE_TAG
          docker login -u "${DOCKERHUB_USER}" -p "${DOCKERHUB_PASS}"
          make docker-image-nodep

workflows:
  version: 2
  build:
    jobs:
      - checkout_code:
          filters:
            tags:
              only: /v.*/
      - check-dependencies:
          requires:
            - checkout_code
          filters:
            tags:
              only: /v.*/
      - lint:
          requires:
            - checkout_code
          filters:
            tags:
              only: /v.*/
      - test:
          requires:
            - checkout_code
          filters:
            tags:
              only: /v.*/
      - build:
          requires:
            - checkout_code
          filters:
            tags:
              only: /v.*/
      - end-to-end:
          requires:
            - check-dependencies
            - test
            - build
          filters:
            tags:
              only: /v.*/
      - publish:
          requires:
            - end-to-end
          filters:
            branches:
              only:
                - master
            tags:
              only: /v.*/
